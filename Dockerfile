# Stage 1: Build Stage
FROM node:18-alpine as BUILD_IMAGE

# Set the working directory inside the container to /app/react-app. This is where the app's files will reside.
WORKDIR /app/react-app

# Copy the package.json file into the working directory. This file defines the project dependencies.
COPY package.json .

# Install the dependencies defined in package.json. This is done before copying the rest of the application files to take advantage of Docker's cache layers, improving rebuild speed.
RUN npm install

# Copy the rest of the application's files into the working directory.
COPY . .

# Build the application for production. The output of this command is the static files that will be served by the web server.
RUN npm run build

# Stage 2: Production Stage
# This stage creates the final, deployable Docker image.
FROM node:18-alpine as PRODUCTION_IMAGE

WORKDIR /app/react-app

# Copy the built application from the build stage to the production stage. The dist/ directory contains the build output.
COPY --from=BUILD_IMAGE /app/react-app/dist/ /app/react-app/dist/

EXPOSE 8000

COPY package.json .
COPY vite.config.ts .

# Install TypeScript in the production image. This is necessary for running the TypeScript application.
RUN npm install typescript

# Expose port 8080 for the application
EXPOSE 8080

# This uses npm to run the "preview" script defined in package.json, which should serve the static files generated by the build step.
CMD ["npm", "run", "preview"]
